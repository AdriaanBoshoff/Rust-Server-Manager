unit uSSL;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.StdCtrls,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdHTTP, System.Zip,
  ActiveX, IdSSLOpenSSL;

type
  TDownload = class;

  Tfrmssldownloader = class(TForm)
    pb1: TProgressBar;
    lblprogress: TLabel;
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    link, path: string;
    error, extract: Boolean;
  end;

  TDownload = class(TThread)
  private
    httpclient: TIdHTTP;
    url: string;
    filename: string;
    maxprogressbar: integer;
    progressbarstatus: integer;
    procedure ExtractZip(ZipFile: string; ExtractPath: string);
    procedure idhttp1WorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
    procedure idhttp1Work(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
    procedure UpdateProgressBar;
    procedure SetMaxProgressBar;
  protected
    procedure Execute; override;
  public
    constructor Create(CreateSuspended: Boolean; aurl, afilename: string);
    destructor Destroy; override;
  end;

var
  frmssldownloader: Tfrmssldownloader;

implementation

{$R *.dfm}
{ Thread }

constructor TDownload.Create(CreateSuspended: Boolean; aurl, afilename: string);
begin
  inherited Create(CreateSuspended);
  httpclient := TIdHTTP.Create(nil);
  httpclient.Request.UserAgent := 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36';
  httpclient.IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(httpclient);
  httpclient.HandleRedirects := True;
  httpclient.OnWorkBegin := idhttp1WorkBegin;
  httpclient.OnWork := idhttp1Work;
  url := aurl;
  filename := afilename;
end;

procedure TDownload.idhttp1WorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
begin
  maxprogressbar := AWorkCountMax;
  Queue(SetMaxProgressBar);
end;

procedure TDownload.idhttp1Work(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
begin
  progressbarstatus := AWorkCount;
  Queue(UpdateProgressBar);
end;

procedure TDownload.Execute;
var
  Stream: TMemoryStream;
begin
  Stream := TMemoryStream.Create;
  try
    httpclient.Get(url, Stream);
    Stream.SaveToFile(filename);

    if frmssldownloader.extract = True then
    begin
      frmssldownloader.Caption := 'Done Downloading. Extracting...';
      ExtractZip(frmssldownloader.path, GetCurrentDir);
    end
    else
    begin
      frmssldownloader.Caption := 'Done.';
      frmssldownloader.Close;
    end;
  finally
    Stream.Free;
  end;
end;

procedure TDownload.UpdateProgressBar;
var
  total: Real;
begin
  frmssldownloader.pb1.Position := progressbarstatus;
  frmssldownloader.Caption := 'Downloading...';
  if maxprogressbar > 0 then
  begin
    total := progressbarstatus / maxprogressbar * 100;
    total := Round(total);
    frmssldownloader.lblprogress.Caption := FloatToStr(total) + ' %';
  end;
end;

procedure TDownload.SetMaxProgressBar;
begin
  frmssldownloader.pb1.Max := maxprogressbar;
end;

destructor TDownload.Destroy;
begin
  FreeAndNil(httpclient);
  inherited Destroy;
end;

procedure TDownload.ExtractZip(ZipFile, ExtractPath: string);
begin
  if TZipFile.IsValid(ZipFile) then
  begin
    TZipFile.ExtractZipFile(ZipFile, ExtractPath);
    DeleteFile(ZipFile);
    frmssldownloader.Caption := 'Done.';
    frmssldownloader.error := False;
    frmssldownloader.Close;
  end
  else
  begin
    frmssldownloader.Caption := 'Error Extracting files';
    frmssldownloader.error := True;
    frmssldownloader.Close;
  end;
end;

procedure Tfrmssldownloader.FormShow(Sender: TObject);
var
  DownloadThread: TDownload;
begin
  pb1.Position := 0;
  frmssldownloader.Caption := 'Starting Download...';
  DownloadThread := TDownload.Create(True, link, path);
  DownloadThread.FreeOnTerminate := True;
  DownloadThread.Start;
end;

end.

